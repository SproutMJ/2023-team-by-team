{"version":3,"file":"components-common-HeaderFallback-HeaderFallback-stories.5e539c4b.iframe.bundle.js","mappings":";;;;;;;;AAUA;AAGA;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;AAIA;AAGA;;;;;AAKA;AAGA;;;;;AAKA;AAGA;;;;;AAKA;;AC/DA;AACA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AAIA;;;;;AAOA;AAEA;;;AAIA;;AAIA;;;;;;;;;;;;AAeA;;AAGA;;;;;;;;;ACnDA;;AAEA;;;;;;;;;;;;;;;;AAgBA","sources":["webpack://frontend/./src/components/common/HeaderFallback/HeaderFallback.styled.ts","webpack://frontend/./src/components/common/Button/Button.styled.ts","webpack://frontend/./src/components/common/Skeleton/Skeleton.styled.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.header`\n  display: flex;\n  justify-content: space-between;\n\n  width: 100%;\n  height: 64px;\n  padding: 0 14px;\n\n  border-bottom: 2px solid ${({ theme }) => theme.color.GRAY200};\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  column-gap: 20px;\n\n  & > div {\n    display: flex;\n    align-items: center;\n    column-gap: 12px;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n\n  & > button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    padding: 0;\n  }\n\n  & > button:not(last-child) {\n    width: 44px;\n    height: 44px;\n  }\n\n  & > button:last-child {\n    width: 50px;\n    height: 50px;\n  }\n`;\n\nexport const Divider = styled.div`\n  width: 1px;\n  height: 24px;\n\n  background-color: ${({ theme }) => theme.color.GRAY500};\n`;\n\nexport const TeamBadgePlaceholder = styled.div`\n  width: 24px;\n  height: 24px;\n\n  border-radius: 50%;\n  background-color: ${({ theme }) => theme.color.GRAY200};\n`;\n\nexport const TeamPlaceMenuPlaceholder = styled.div`\n  width: 300px;\n  height: 40px;\n\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.color.GRAY200};\n`;\n\nexport const ProfileImagePlaceholder = styled.div`\n  width: 40px;\n  height: 40px;\n\n  border-radius: 50%;\n  background-color: ${({ theme }) => theme.color.GRAY200};\n`;\n","import { styled, css } from 'styled-components';\r\nimport type { CSSProp } from 'styled-components';\r\nimport type { ButtonVariant, ButtonProps } from './Button';\r\nimport type { ButtonSize } from '~/types/size';\r\n\r\nconst paddingSize: Record<ButtonSize, string> = {\r\n  sm: '6px',\r\n  md: '12px',\r\n  lg: '18px',\r\n};\r\n\r\nconst variants: Record<ButtonVariant, CSSProp> = {\r\n  primary: css`\r\n    background-color: ${({ theme }) => theme.color.PRIMARY};\r\n    color: ${({ theme }) => theme.color.WHITE};\r\n  `,\r\n\r\n  normal: css`\r\n    background-color: ${({ theme }) => theme.color.WHITE};\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n    border: 1px solid ${({ theme }) => theme.color.GRAY300};\r\n  `,\r\n\r\n  plain: css`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n  `,\r\n};\r\n\r\nexport const ButtonWrapper = styled.button.withConfig({\r\n  shouldForwardProp: (prop) => !['css', 'variant', 'size'].includes(prop),\r\n})<ButtonProps>`\r\n  font-size: 16px;\r\n  line-height: 16px;\r\n  text-align: center;\r\n\r\n  ${({ size = 'md' }) => {\r\n    return css`\r\n      padding: ${paddingSize[size]};\r\n    `;\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    return variants[variant];\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    if (variant !== 'plain') {\r\n      return css`\r\n        &:disabled {\r\n          opacity: 0.6;\r\n        }\r\n\r\n        &:not([disabled]):hover {\r\n          opacity: 0.8;\r\n        }\r\n\r\n        border-radius: 4px;\r\n\r\n        transition: 0.2s;\r\n      `;\r\n    }\r\n  }};\r\n\r\n  ${(props) => props.css}\r\n`;\r\n","import styled from 'styled-components';\nimport type { SkeletonProps } from '~/components/common/Skeleton/Skeleton';\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['variant', 'css'].includes(prop),\n})<SkeletonProps>`\n  position: relative;\n  overflow: hidden;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(0, 0, 0, 0.03);\n  border-radius: ${({ variant }) => (variant === 'circle' ? '50%' : '4px')};\n\n  ${({ css }) => css}\n\n  &::after {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n\n    background: linear-gradient(\n      90deg,\n      transparent,\n      rgba(0, 0, 0, 0.06),\n      transparent\n    );\n\n    animation: ${({ theme }) => theme.animation.loading} 1.5s linear 0.5s\n      infinite;\n\n    content: '';\n  }\n`;\n"],"names":[],"sourceRoot":""}