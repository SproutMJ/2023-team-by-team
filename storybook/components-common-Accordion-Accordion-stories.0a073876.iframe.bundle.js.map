{"version":3,"file":"components-common-Accordion-Accordion-stories.0a073876.iframe.bundle.js","mappings":";;;AAMA;;;AAKA;;;AAIA;;AAMA;;;;AAOA;;;;;;;;AAQA;;;;;AAOA;AAGA;;AC3CA;;;;;;ACCA;;AAEA;;;;ACFA;AACA;AACA;;;ACEA;ACKA;AACA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AAIA;;;;;AAOA;AAEA;;;AAIA;;AAIA;;;;;;;;;;;;AAeA;;AAGA","sources":["webpack://frontend/./src/components/common/Accordion/AccordionHeader/AccordionHeader.styled.tsx","webpack://frontend/./src/components/common/Accordion/AccordionItem/AccordionItem.styled.tsx","webpack://frontend/./src/components/common/Accordion/Accordion.styled.tsx","webpack://frontend/./src/components/common/Accordion/AccordionBody/AccordionBody.styled.ts","webpack://frontend/./src/components/common/Accordion/AccordionBody/AccordionBody.tsx","webpack://frontend/./src/components/common/Button/Button.styled.ts"],"sourcesContent":["import type { CSSProperties } from 'react';\nimport styled, { css } from 'styled-components';\n\nexport const Container = styled.div<{ $isOpen: boolean }>`\n  cursor: pointer;\n\n  ${({ $isOpen = false }) => {\n    if ($isOpen)\n      return css`\n        outline: 3px ridge rgba(0, 46, 210, 0.381);\n        border-radius: 2px;\n      `;\n  }}\n  svg {\n    transition: transform 0.2s ease-in-out;\n    ${({ $isOpen = false }) => {\n      if ($isOpen)\n        return css`\n          transform: rotate(-180deg);\n        `;\n\n      return css`\n        transform: rotate(0);\n      `;\n    }}\n  }\n`;\n\nexport const accordionButton = ($padding: CSSProperties['padding']) => css`\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n  overflow-anchor: none;\n\n  width: 100%;\n  padding: ${$padding};\n  text-align: left;\n\n  border: 0;\n  border-radius: 0;\n`;\n\nexport const DisabledWrapper = styled.div<{\n  $padding: CSSProperties['padding'];\n}>`\n  ${({ $padding }) => accordionButton($padding)}\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.color.GRAY300};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n","import type { CSSProperties } from 'react';\nimport styled from 'styled-components';\n\nexport const Container = styled.div<{ $width: CSSProperties['width'] }>`\n  width: ${({ $width = 'auto' }) => $width};\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY300};\n  border-radius: 4px;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div<{ $isOpen: boolean; $height: number }>`\n  overflow: hidden;\n  height: ${({ $isOpen, $height }) => ($isOpen ? $height + 24 : 0)}px;\n  padding: ${({ $isOpen }) => ($isOpen ? '10px 18px 12px' : '0 18px')};\n  border-top: 1px solid ${({ theme }) => theme.color.GRAY300};\n\n  transition: 0.35s ease;\n`;\n","import { useState, type PropsWithChildren, useRef, useEffect } from 'react';\nimport * as S from './AccordionBody.styled';\nimport { useAccordion } from '~/hooks/useAccordion';\n\ninterface AccordionBodyProps {\n  id: number;\n}\n\nconst AccordionBody = (props: PropsWithChildren<AccordionBodyProps>) => {\n  const { id, children } = props;\n  const { openedAccordion } = useAccordion();\n  const [bodyHeight, setBodyHeight] = useState(0);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(() => {\n      setBodyHeight(() => {\n        return ref.current ? ref.current.clientHeight : 0;\n      });\n    });\n\n    resizeObserver.observe(ref.current);\n\n    return () => resizeObserver.disconnect();\n  });\n\n  const getResultHeight = () => {\n    if (id === openedAccordion) {\n      return bodyHeight;\n    }\n\n    return 0;\n  };\n\n  return (\n    <S.Container $isOpen={id === openedAccordion} $height={getResultHeight()}>\n      <div ref={ref}>{children}</div>\n    </S.Container>\n  );\n};\n\nexport default AccordionBody;\n","import { styled, css } from 'styled-components';\r\nimport type { CSSProp } from 'styled-components';\r\nimport type { ButtonVariant, ButtonProps } from './Button';\r\nimport type { ButtonSize } from '~/types/size';\r\n\r\nconst paddingSize: Record<ButtonSize, string> = {\r\n  sm: '6px',\r\n  md: '12px',\r\n  lg: '18px',\r\n};\r\n\r\nconst variants: Record<ButtonVariant, CSSProp> = {\r\n  primary: css`\r\n    background-color: ${({ theme }) => theme.color.PRIMARY};\r\n    color: ${({ theme }) => theme.color.WHITE};\r\n  `,\r\n\r\n  normal: css`\r\n    background-color: ${({ theme }) => theme.color.WHITE};\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n    border: 1px solid ${({ theme }) => theme.color.GRAY300};\r\n  `,\r\n\r\n  plain: css`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n  `,\r\n};\r\n\r\nexport const ButtonWrapper = styled.button.withConfig({\r\n  shouldForwardProp: (prop) => !['css', 'variant', 'size'].includes(prop),\r\n})<ButtonProps>`\r\n  font-size: 16px;\r\n  line-height: 16px;\r\n  text-align: center;\r\n\r\n  ${({ size = 'md' }) => {\r\n    return css`\r\n      padding: ${paddingSize[size]};\r\n    `;\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    return variants[variant];\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    if (variant !== 'plain') {\r\n      return css`\r\n        &:disabled {\r\n          opacity: 0.6;\r\n        }\r\n\r\n        &:not([disabled]):hover {\r\n          opacity: 0.8;\r\n        }\r\n\r\n        border-radius: 4px;\r\n\r\n        transition: 0.2s;\r\n      `;\r\n    }\r\n  }};\r\n\r\n  ${(props) => props.css}\r\n`;\r\n"],"names":[],"sourceRoot":""}