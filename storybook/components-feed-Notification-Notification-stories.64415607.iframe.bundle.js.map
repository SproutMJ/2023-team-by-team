{"version":3,"file":"components-feed-Notification-Notification-stories.64415607.iframe.bundle.js","mappings":";;;;;;;AAaA;;;AAGA;;;AAIA;;AAEA;;;;;AASA;;;;;AAAA;;;;;;;;;;AAmBA;;;;;;;AASA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;;;AAGA","sources":["webpack://frontend/./src/components/feed/Notification/Notification.styled.ts","webpack://frontend/./src/components/common/Text/Text.styled.ts"],"sourcesContent":["import { css, styled } from 'styled-components';\nimport type { NotificationProps } from '~/components/feed/Notification/Notification';\nimport type { ThreadSize } from '~/types/size';\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['teamPlaceColor', 'threadSize'].includes(prop),\n})<Pick<NotificationProps, 'teamPlaceColor' | 'threadSize'>>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n\n  color: ${({ theme }) => theme.color.WHITE};\n  white-space: pre-wrap;\n\n  background-color: ${({ theme, teamPlaceColor = 0 }) =>\n    theme.teamColor[teamPlaceColor]};\n\n  filter: brightness(1.2);\n  box-shadow: 0 0 8px ${({ theme }) => theme.color.GRAY500};\n\n  ${({ threadSize }) => {\n    if (threadSize === 'md')\n      return css`\n        padding: 10px 50px;\n        height: 50px;\n\n        border-radius: 20px;\n      `;\n\n    if (threadSize === 'sm')\n      return css`\n        padding: 10px 20px;\n        height: 42px;\n\n        border-radius: 16px;\n      `;\n  }}\n\n  &.can-hover {\n    &:hover {\n      height: 130px;\n      text-overflow: initial;\n    }\n\n    transition: 0.2s;\n  }\n`;\n\nexport const Inner = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  max-width: 700px;\n  height: 100%;\n`;\n\nexport const notification = (threadSize: ThreadSize) => css`\n  overflow: hidden;\n\n  width: 100%;\n  max-height: 100%;\n\n  font-size: ${threadSize === 'md' ? 18 : 16}px;\n  font-weight: 500;\n  letter-spacing: 0.8px;\n`;\n","import { styled } from 'styled-components';\nimport type { TextSize } from '~/types/size';\nimport type { TextProps, Weight } from './Text';\n\nconst fontWeight: Record<Weight, number> = {\n  light: 100,\n  normal: 400,\n  semiBold: 600,\n  bold: 800,\n};\n\nconst fontSize: Record<TextSize, string> = {\n  xxs: '10px',\n  xs: '12px',\n  sm: '14px',\n  md: '16px',\n  lg: '18px',\n  xl: '20px',\n  xxl: '22px',\n};\n\nexport const TextWrapper = styled.p.withConfig({\n  shouldForwardProp: (prop) => !['size', 'weight', 'css'].includes(prop),\n})<TextProps>`\n  h1&,\n  h2&,\n  h3&,\n  h4&,\n  h5&,\n  h6& {\n    font-weight: bold;\n  }\n  h1& {\n    font-size: 36px;\n  }\n  h2& {\n    font-size: 32px;\n  }\n  h3& {\n    font-size: 28px;\n  }\n  h4& {\n    font-size: 24px;\n  }\n  p&,\n  span&,\n  strong&,\n  small& {\n    font-size: ${({ size = 'md' }) => fontSize[size] || 'initial'};\n    font-weight: ${({ weight = 'normal' }) => fontWeight[weight] || 'initial'};\n  }\n  && {\n    ${(props) => props.css}\n  }\n`;\n"],"names":[],"sourceRoot":""}